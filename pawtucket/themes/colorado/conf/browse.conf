#
# 
#
cache_timeout = 86400

browseTypes = {
	eggshell = {
		displayName = _("Eggshell"),
		labelSingular = _("Eggshell"),
 		labelPlural = _("Eggshells"),
		table = ca_objects,
		
		restrictToTypes = [eggshell, fossil, recent, pseudo, associated],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Identifier = ca_objects.idno_sort,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		}
	},
	vertebrate = {
		displayName = _("Vertebrate"),
		labelSingular = _("Vertebrate"),
 		labelPlural = _("Vertebrates"),
		table = ca_objects,
		
		restrictToTypes = [vertebrate, vertebrate_item, vertebrate_cast, ost_specimen],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Identifier = ca_objects.idno_sort,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		}
	},
	tracks = {
		displayName = _("Track"),
		labelSingular = _("Track"),
 		labelPlural = _("Tracks"),
		table = ca_objects,
		
		restrictToTypes = [track, track_item],
		dontExpandTypesHierarchically = true,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Identifier = ca_objects.idno_sort,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		}
	}
}

views = {
	list = {
		icon = glyphicon-list
	},
	images = {
		icon = glyphicon-th
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

placeholder_media_icon = <i class='fa fa-picture-o fa-2x'></i>

browse_menu_format = list

ca_objects = {
	facets = {
		place_facet_hier = {
			type = authority,
			table = ca_places,
			relationship_table = ca_objects_x_places,
			
			group_mode = hierarchical,
			groupings = {
			
			},
			
			deferred_load = 1,
			
			use_idno = 1,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("locality browser"),
			label_plural = _("localities browser")
		},
		parataxon_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = parataxon,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			deferred_load = 1,
			
			facet_groups = [],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(parataxon),
			label_plural = _(parataxa),
			group_name = _(Taxonomy)
		},
		order_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = order,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			facet_groups = [],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = list,
			
			indefinite_article = a,
			label_singular = _(order),
			label_plural = _(orders),
			group_name = _(Taxonomy)
		},
		family_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = family,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			facet_groups = [],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(family),
			label_plural = _(families),
			group_name = _(Taxonomy)
		},
		genus_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = genus,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			facet_groups = [],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(genus),
			label_plural = _(genera),
			group_name = _(Taxonomy)
		},
		species_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = species,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			facet_groups = [],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			requires = [genus],
			
			indefinite_article = a,
			label_singular = _(species),
			label_plural = _(species),
			group_name = _(Taxonomy)
		},
		#
		# Misc
		#
		morphotype = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = morphotype,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			facet_groups = [],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(morphotype),
			label_plural = _(morphotypes),
			group_name = _(General)
		},
		pore_system = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = poreSystem,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(pore system),
			label_plural = _(pore system),
			group_name = _(General)
		},
		nest_structure_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = nestStructure,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(nest structure),
			label_plural = _(nest structures),
			group_name = _(General)
		},
		embryos_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = embryos,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
						
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(embryo),
			label_plural = _(embryos),
			group_name = _(General)
		},
		statigraphy_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = stratigraphy,
			relative_to = ca_places,
			type_restrictions = [eggshell, fossil, recent, pseudo, associated],
						
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _("geochronology"),
			label_plural = _("geochronology"),
			group_name = _(General)
		},		
		track_type_status = {
			type = attribute,
			element_code = track_type_status,
			type_restrictions = [track, track_item, tracing, cast],
			
			group_mode = none,
			exclude_values = [null],
			
			label_singular = _("type"),
			label_plural = _("types")
		},	
		ichnogenus = {
			type = attribute,
			element_code = ichnogenus,
			type_restrictions = [track, track_item, tracing, cast],
			exclude_values = [null, null2],
			
			group_mode = alphabetical,
			
			label_singular = _("ichnogenus"),
			label_plural = _("ichnogenus")
		},	
 		taxonomic_rank = {
			type = attribute,
 			element_code = taxonomic_rank,
 			type_restrictions = [track, track_item, tracing, cast, vertebrate, vertebrate_item, vertebrate_cast, ost_specimen],
 			
			deferred_load = 1,
			
 			group_mode = hierarchical,
 			show_hierarchy = 1,
			
 			label_singular = _("taxonomy"),
 			label_plural = _("taxonomy")
 		},
		formation_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = formation,
			relative_to = ca_places,
			type_restrictions = [track, track_item, tracing, cast],
						
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _("formation"),
			label_plural = _("formation"),
			group_name = _(General)
		},
		era = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = era,
			relative_to = ca_places,
			type_restrictions = [track, track_item, tracing, cast, vertebrate, vertebrate_item, vertebrate_cast, ost_specimen],
						
			deferred_load = 1,
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			exclude_values = [null, "none"],
			
			indefinite_article = a,
			label_singular = _("era"),
			label_plural = _("eras"),
			group_name = _(General)
		},
		period = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = period_main,
			relative_to = ca_places,
			type_restrictions = [track, track_item, tracing, cast, vertebrate, vertebrate_item, vertebrate_cast, ost_specimen],
					
			deferred_load = 1,
				
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			exclude_values = [null, "none"],
			
			indefinite_article = a,
			label_singular = _("period"),
			label_plural = _("periods"),
			group_name = _(General)
		},
		epoch = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = epoch_main,
			relative_to = ca_places,
			type_restrictions = [track, track_item, tracing, cast, vertebrate, vertebrate_item, vertebrate_cast, ost_specimen],
			
			requires = [period, era],			
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			exclude_values = [null, "none"],
			
			indefinite_article = a,
			label_singular = _("epoch"),
			label_plural = _("epochs"),
			group_name = _(General)
		},
		age = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = ageNALMA,
			relative_to = ca_places,
			type_restrictions = [track, track_item, tracing, cast, vertebrate, vertebrate_item, vertebrate_cast, ost_specimen],
						
			requires = [period, era],	
			
			groupings = {
			#	label = _(Name)
			},
			group_mode = alphabetical,
			exclude_values = [null, "none"],
			
			indefinite_article = a,
			label_singular = _("age"),
			label_plural = _("ages"),
			group_name = _(General)
		},	
		original = {
			type = attribute,
			element_code = original,
			type_restrictions = [track, track_item, tracing, cast],
			
			group_mode = none,
			
			label_singular = _("original"),
			label_plural = _("original")
		},	
		plastic = {
			type = attribute,
			element_code = plastic,
			type_restrictions = [track, track_item, tracing, cast],
			
			group_mode = none,
			
			label_singular = _("plastic"),
			label_plural = _("plastic")
		},	
		latex = {
			type = attribute,
			element_code = latex,
			type_restrictions = [track, track_item, tracing, cast],
			
			group_mode = none,
			
			label_singular = _("latex"),
			label_plural = _("latex")
		},	
		fiberglass = {
			type = attribute,
			element_code = fiberglass,
			type_restrictions = [track, track_item, tracing, cast],
			
			group_mode = none,
			
			label_singular = _("fiberglass"),
			label_plural = _("fiberglass")
		},
		has_media_facet = {
			type = has,
			
			deferred_load = 0,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		}
	}
}