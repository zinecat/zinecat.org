#
# 
#


cache_timeout = 518400

browseTypes = {
	objects = {
		displayName = _(Specimen),
		labelSingular = _("specimen"),
 		labelPlural = _("specimens"),
		table = ca_objects,
		
		restrictToTypes = [],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				name = map,
				icon = glyphicon-globe,
				data = ca_objects.georeference,
				width = 100%,
				height = 600px,
				display = {
					title_template = ^ca_objects.idno,
					description_template = <div style='float:right; margin-left: 8px;'><l>^ca_object_representations.media.preview</l></div> <p><l>^ca_objects.idno</l><br/>^ca_objects.taxonomy_specimen.scientific_name (^ca_objects.taxonomy_specimen.vernacular_name)</p>		
				}
			},
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_objects.scientific_name,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

placeholder_media_icon = <i class='fa fa-picture-o fa-2x'></i>

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browse_menu_format = list

# --- refine_col_class -> boostrap cold class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9

# --- refine_col_class -> boostrap cold class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3




#
# Browse configuration
#

# number of hits to be loaded per page/ajax load
defaultHitsPerBlock = 36

# number of seconds to keep cached browses around
# set to 0 to disable caching

# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		source = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = fieldList,		
			field = source_id,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(source),
			label_plural = _(sources)
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		},
		fossil_or_modern_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = fossil_or_modern,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(Fossil/modern),
			label_plural = _(Fossil/modern)
		},
		vernacular_name_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = vernacular_name,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(Common name),
			label_plural = _(Common names)
		},
		genus_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = genus,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(genus),
			label_plural = _(genus)
		},
		species_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = species,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			requires = [genus_facet],
			
			indefinite_article = a,
			label_singular = _(species),
			label_plural = _(species)
		},
		continent_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = continent,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(continent),
			label_plural = _(continent)
		},
		country_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = country_loc,
			
			requires = [],
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(country),
			label_plural = _(country)
		},
		state_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = state_province,
			
			requires = [country_facet],
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(state/province),
			label_plural = _(state/province)
		},
		county_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = county,
			
			requires = [state_facet],
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(county),
			label_plural = _(county)
		},
		municipality_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = municipality,
			
			requires = [county_facet],
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(municipality),
			label_plural = _(municipality)
		},
		locality_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = locality,
			
			requires = [municipality_facet],
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(locality),
			label_plural = _(locality)
		},
		eonothem_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = eonothem,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(eonothem),
			label_plural = _(eonothems)
		},
		erathem_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = erathem,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(erathem),
			label_plural = _(erathem)
		},
		system_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = system,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(system),
			label_plural = _(system)
		},
		series_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = series,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(series),
			label_plural = _(series)
		},
		stage_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = stage,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(stage),
			label_plural = _(stage)
		},
		substage_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = attribute,		
			element_code = substage,
			
			facet_groups = [],
			group_mode = alphabetical,
			
			indefinite_article = a,
			label_singular = _(substage),
			label_plural = _(substage)
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			group_mode = hierarchical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter =  &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("Type"),
			label_plural = _("Types"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms.")
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
	}
}