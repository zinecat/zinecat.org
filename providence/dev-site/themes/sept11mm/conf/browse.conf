cache_timeout = 0
#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {}
		},
		sortBy = {
			Title = ca_object_labels.public_title
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =


# Configuration for object browse
ca_objects = {
	name = _("Objects"),
	facets = {
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			
			individual_group_display = 0,
			
			#group_mode = hierarchical,
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			suppress = ["Root node for voc_6"],
			
			# Set to non-zero value to display hierarchy on items in this facet
			#show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			#hierarchical_delimiter =  &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			#remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			#hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			#hierarchy_order  = DESC,
			
			label_singular = _("keyword"),
			label_plural = _("keywords"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms.")
		},	
		type_facet = {
			type = fieldList,
			field = type_id,
			order_by_label_fields = [name_sort],
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
		medium_facet = {
			type = attribute,
			element_code = medium,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_sort],
			suppress = [null],
			label_singular = _("Medium"),
			label_plural = _("Medium"),
			description = _("Find objects by Medium."),	
		},
		label_facet = {
			type = label,
			
			group_mode = alphabetical,
			preferred_labels_only = 1,
			
			order_by_label_fields = [name],
			
			label_singular = _("Name"),
			label_plural = _("Name"),
			description = _("Find objects by their name."),	
		},
		curators_comment = {
			type = has,
			element_code = curators_comment,
			
			label_singular = _("Has curator's comments"),
			label_plural = _("Has curator's comments"),
			description = _("Find objects with curator comments."),	
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_relationship_types = [donor],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("source"),
			label_plural = _("sources"),
			description = _("Find objects according to their sources."),
			requires = [hidden]
		}
	}
}