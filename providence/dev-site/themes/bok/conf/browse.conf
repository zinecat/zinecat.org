# number of seconds to keep cached browses around
# set to 0 to disable caching
cache_timeout = 0
#
# 
#
browseTypes = {
	practice = {
		displayName = _(Resources),
		labelSingular = _("resource"),
 		labelPlural = _("resources"),
		table = ca_objects,
		
		restrictToTypes = [Activities_and_Labs, Assessment, Game, Homework_and_Assignment, Simulation],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	content = {
		displayName = _(Resources),
		labelSingular = _("resource"),
 		labelPlural = _("resources"),
		table = ca_objects,
		
		restrictToTypes = [Article, Audio, Book, Case_Study, Images_and_Illustrations, Lecture_Notes, Lesson_Plan, Presentation, Video],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	courses = {
		displayName = _(Resources),
		labelSingular = _("resource"),
 		labelPlural = _("resources"),
		table = ca_objects,
		
		restrictToTypes = [Full_Course_Online, Full_Course_Classroom, Syllabus],
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	resources = {
		displayName = _(Resources),
		labelSingular = _("resource"),
 		labelPlural = _("resources"),
		table = ca_objects,
		
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	community = {
		displayName = _(Experts/Organisations),
		labelSingular = _("Expert/Organisation"),
 		labelPlural = _("Experts/Organisations"),
		table = ca_entities,
		
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		sortBy = {
			Title = ca_entity_labels.name,
			Identifier = ca_objects.idno
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Identifier = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}

}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

placeholder_media_icon = <i class='fa fa-picture-o fa-2x'></i>

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browse_menu_format = list

# --- refine_col_class -> boostrap cold class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9

# --- refine_col_class -> boostrap cold class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3

ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("resource type"),
			label_plural = _("resource types"),
			description = _("Find resource according to type."),
		},
#		occurrence_facet = {
#			type = authority,
#			table = ca_occurrences,
#			generate_facets_for_types = 1,
#			relationship_table = ca_objects_x_occurrences,
#			restrict_to_types = [],
#			
#			group_mode = alphabetical,
#			
#			label_singular = _("occurrence"),
#			label_plural = _("occurrences"),
#			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
#		},
		level_hier_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			
			requires = [category_facet],
			
			group_mode = hierarchical,
			order_by_label_fields = [],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = ,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = ,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			label_singular = _("Competences by Level"),
			label_plural = _("Competences by Level"),
			description = _("Competences by Level"),
		},
		category_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [category],
			
			group_mode = alphabetical,
			
			requires = [occurrence_facet],
			
			label_singular = _("Category"),
			label_plural = _("Categories"),
			description = _("Competence categories"),
		},
#		level_facet = {
#			type = authority,
#			table = ca_occurrences,
#			relationship_table = ca_objects_x_occurrences,
#			restrict_to_types = [level],
#			
#			group_mode = alphabetical,
#			
#			requires = [category_facet],
#			label_singular = _("Level"),
#			label_plural = _("Levels"),
#			description = _("Competence level"),
#		},
#		competence_facet = {
#			type = authority,
#			table = ca_occurrences,
#			relationship_table = ca_objects_x_occurrences,
#			restrict_to_types = [competence],
#			
#			group_mode = alphabetical,
#			
#			requires = [level_facet],
#			label_singular = _("Competences For This Level"),
#			label_plural = _("Competences"),
#			description = _("Competences"),
#		},		
		region_facet = {
			type = attribute,
			element_code = regions,
			
			group_mode = alphabetical,
			
			label_singular = _("Region"),
			label_plural = _("Regions")
		},		
		language_facet = {
			type = attribute,
			element_code = language,
			
			group_mode = alphabetical,
			
			label_singular = _("Language"),
			label_plural = _("Languages")
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		}
	}
}

ca_entities = {
	name = _("Entities"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Type"),
			label_plural = _("Types"),
			description = _("Find entities according to type."),
		},		
		region_facet = {
			type = attribute,
			element_code = regions,
			
			group_mode = alphabetical,
			
			label_singular = _("Region"),
			label_plural = _("Regions")
		},		
		language_facet = {
			type = attribute,
			element_code = language,
			
			group_mode = alphabetical,
			
			label_singular = _("Language"),
			label_plural = _("Languages")
		},
		category_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [category],
			
			group_mode = alphabetical,
			
			requires = [occurrence_facet],
			
			label_singular = _("Category"),
			label_plural = _("Categories"),
			description = _("Competence categories"),
		},
		level_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [level],
			
			group_mode = alphabetical,
			
			requires = [category_facet],
			label_singular = _("Level"),
			label_plural = _("Levels"),
			description = _("Competence level"),
		},
		competence_facet = {
			type = authority,
			table = ca_occurrences,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [competence],
			
			group_mode = alphabetical,
			
			requires = [level_facet],
			label_singular = _("Competence"),
			label_plural = _("Competence"),
			description = _("Competences"),
		}
	}
}
