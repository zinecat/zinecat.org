#
# Embedded media metadata extraction config
#
#
# CollectiveAccess can extract metadata such as titles, descriptions, dates, georeferences and technical information
# embedded in uploaded media and automatically add it to catalogue records, streamlining workflow.
# Catalogue data can also be embedded into media as they are downloaded from CollectiveAccess. This can be useful if you want
# metadata to "travel" with a downloaded file.
#
# CollectiveAccess supports inserting of extracted metadata into the following catalogue items:
#
# - objects ("ca_objects")
# - object representations ("ca_object_representations")
#
# CollectiveAccess can embed as XMP metadata into media catalogue data from any item related to the media's ca_object_representations record.
# Relationships may be specified as relative to the ca_object_representations record or a ca_objects record.
# NOTE: *only* XMP fields are supported for embedding. See http://wiki.collectiveaccess.org/index.php?title=Media_Metadata for a list.
#
# This configuration file allows you to define how metadata is extracted and inserted into the catalogue ("import" mappings), and how
# metadata is embedded into media downloaded from CollectiveAccess ("export" mappings). You can specify different 
# import and export mappings for different types of a catalogue item. For example, you could have a mapping for "video" 
# objects, another for "photograph" objects and a third for everything else. 
#
# Each catalogue item may have a default mapping used for all types for which a mapping has not been otherwise specified. 
# If you don't specify at least one mapping applicable to a catalogue item type, either type-specific or default,  
# processing will not be performed.


# Extract embedded EXIF georeferencing from images into an object representation or related object?
# Set the list below with the full element code(s) of the georeferencing elements, including table name. 
# The table name can be either ca_objects and ca_object_representations
# Ex. ca_objects.geocoords, ca_object_representations.geocoords
#
# extract_embedded_exif_georeferencing_to is for simple mappings where the destination for the data is a non-container element
# Use extract_embedded_exif_georeferencing_to_container for mappings to a container where other elements in the container may need to be set to specific values.
# If you need to set a list element in a container you can use the idno of the list item you want to select as the value.

extract_embedded_exif_georeferencing_to = []
extract_embedded_exif_georeferencing_to_container = {
# (uncomment these lines and change to suit)
#	ca_objects.georeference = {
#		value = ca_objects.georeference.geocode,
#		map = {
#			ca_objects.georeference.geo_notes = Imported
#		}
#	}
}

# Extract embedded EXIF create date/time stamp from images into an object representation or related object?
# Set the list below with the full element code(s) of the DateRange or Text elements, including table name. 
# The table name can be either ca_objects and ca_object_representations
#
# extract_embedded_exif_creation_date_to is for simple mappings where the destination for the data is a non-container element
# Use extract_embedded_exif_creation_date_to_container for mappings to a container where other elements in the container may need to be set to specific values.
# If you need to set a list element in a container you can use the idno of the list item you want to select as the value.

extract_embedded_exif_creation_date_to = []
extract_embedded_exif_creation_date_to_container = {
# (uncomment these lines and change to suit)
#	ca_objects.date = {
#		value = ca_objects.date.dates_value,
#		map = {
#			ca_objects.date.dc_dates_types = created
#		}
#	}
}

#
# Mappings used when inserting extracted embedded metadata into a catalogue item
#
# For a given type, they keys are embedded metadata fields, and the values are an associative list of metadata element codes, intrinsic field values, preferred_labels or nonpreferred_labels
# The specifier for embedded metadata fields are formed by concatenating the metadata system (ex. "EXIF", "IPTC", "XMP"), any sub-categories and the field name using colons (":"). 
# For systems such as XMP, simply add the field name onto "XMP:" (ex. "XMP:Description"). For EXIF, which uses nested sub-categories, specifier can be more complex. For
# example: EXIF:IFD0:Model would represent the model of camera used to create the image.
#

import_mappings = {
	ca_objects = {
# UNCOMMENT THE LINES BELOW TO PERFORM EXTRACTION
#		__default__ = {
#			XMP:Title = {
#				preferred_labels.name
#			},
#			XMP:Description = {
#				description
#			}
#		}
	},
	ca_object_representations = {
#		__default__ = {
#			XMP:Description = {
#				caption, preferred_labels.name
#			}
#		}
	}
}

#
# Export mappings used when embedding catalogue data into media for download
#
# The mapping codes listed here should refer to existing "ExifTool" export mappings.
# Note that exiftool has to be installed for the embedding to work. You won't see an
# error message if it isn't.
# You can define mappings per table and type. The __default__ rule catches undefined types and acts as a fallback.
#

export_mappings = {
	ca_objects = {
		__default__ = exiftool_test,
	},
	ca_object_representations = {
		__default__ = exiftool_photocredit,
	}
}

# embedding metadata into large sets of media can be very time (and disk space) consuming, so if you're often downloading
# media for large result sets and don't care about media metadata being embedded in these sets, you can disable it here
do_metadata_embedding_for_search_result_media_download = 1
do_metadata_embedding_for_lot_media_download = 1
